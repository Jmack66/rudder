#!/usr/bin/env python3
"""
Printer Logbook - User-friendly startup script

This script provides an interactive way to start the Printer Logbook application
with proper configuration prompts for first-time users.
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path

def get_user_input(prompt, default=None, required=True):
    """Get user input with optional default value."""
    if default:
        full_prompt = f"{prompt} (default: {default}): "
    else:
        full_prompt = f"{prompt}: "

    while True:
        value = input(full_prompt).strip()
        if value:
            return value
        elif default:
            return default
        elif not required:
            return None
        else:
            print("This field is required. Please enter a value.")

def validate_moonraker_url(url):
    """Basic validation of Moonraker URL format."""
    if not url.startswith(('http://', 'https://')):
        return False
    if ':' not in url.split('://', 1)[1]:
        return False
    return True

def create_env_file():
    """Create .env file with user configuration."""
    print("\nüîß First-time setup: Let's configure your Moonraker connection")
    print("=" * 60)

    # Get Moonraker URL
    while True:
        moonraker_url = get_user_input(
            "Enter your Moonraker URL (e.g., http://192.168.1.10:7125)",
            default="http://192.168.1.10:7125"
        )

        if validate_moonraker_url(moonraker_url):
            break
        else:
            print("‚ùå Invalid URL format. Please use format: http://IP_ADDRESS:PORT")

    # Get poll interval
    while True:
        try:
            poll_interval = get_user_input(
                "Enter poll interval in seconds",
                default="15"
            )
            poll_interval = int(poll_interval)
            if poll_interval > 0:
                break
            else:
                print("‚ùå Poll interval must be a positive number.")
        except ValueError:
            print("‚ùå Please enter a valid number.")

    # Create .env file
    env_content = f"""# Moonraker Configuration
# Generated by start.py on {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

# Moonraker URL - Update this to match your printer's IP address and port
MOONRAKER_URL={moonraker_url}

# Poll interval for checking print status (in seconds)
POLL_INTERVAL={poll_interval}

# Optional: Database configuration
# SQLALCHEMY_DATABASE_URI=sqlite:///printer_logbook.db

# Optional: Upload folder for G-code files
# UPLOAD_FOLDER=uploads
"""

    with open('.env', 'w') as f:
        f.write(env_content)

    print(f"\n‚úÖ Configuration saved to .env file")
    print(f"   Moonraker URL: {moonraker_url}")
    print(f"   Poll interval: {poll_interval} seconds")
    return moonraker_url, poll_interval

def test_moonraker_connection(url):
    """Test connection to Moonraker."""
    try:
        import requests
        print(f"\nüîç Testing connection to {url}...")
        response = requests.get(f"{url}/printer/info", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Successfully connected to Moonraker!")
            return True
        else:
            print(f"‚ö†Ô∏è  Connection test failed (HTTP {response.status_code})")
            return False
    except ImportError:
        print("‚ö†Ô∏è  Cannot test connection (requests module not available)")
        return None
    except Exception as e:
        print(f"‚ùå Connection test failed: {e}")
        return False

def check_dependencies():
    """Check if required dependencies are installed."""
    required_packages = ['flask', 'flask_sqlalchemy', 'flask_cors', 'requests', 'python-dotenv']
    missing_packages = []

    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)

    if missing_packages:
        print("‚ùå Missing required packages:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\nInstall them with: pip install -r requirements.txt")
        return False

    return True

def main():
    parser = argparse.ArgumentParser(description='Start Printer Logbook Application')
    parser.add_argument('--skip-setup', action='store_true',
                       help='Skip interactive setup (use existing .env or defaults)')
    parser.add_argument('--moonraker-url', type=str,
                       help='Moonraker URL (bypasses .env file)')
    parser.add_argument('--poll-interval', type=int, default=15,
                       help='Poll interval in seconds')
    parser.add_argument('--no-test', action='store_true',
                       help='Skip connection test')
    parser.add_argument('--debug', action='store_true',
                       help='Run Flask in debug mode')

    args = parser.parse_args()

    print("üñ®Ô∏è  Printer Logbook Startup")
    print("=" * 40)

    # Check dependencies
    if not check_dependencies():
        sys.exit(1)

    # Handle configuration
    moonraker_url = None

    if args.moonraker_url:
        # Use command line argument
        moonraker_url = args.moonraker_url
        print(f"Using Moonraker URL from command line: {moonraker_url}")
    elif not args.skip_setup and not os.path.exists('.env'):
        # Interactive setup for first-time users
        moonraker_url, _ = create_env_file()
    elif os.path.exists('.env'):
        # Load from existing .env file
        from dotenv import load_dotenv
        load_dotenv()
        moonraker_url = os.getenv('MOONRAKER_URL')
        if moonraker_url:
            print(f"Using Moonraker URL from .env file: {moonraker_url}")
        else:
            print("‚ö†Ô∏è  No MOONRAKER_URL found in .env file")

    # Test connection if we have a URL and user didn't skip
    if moonraker_url and not args.no_test:
        connection_ok = test_moonraker_connection(moonraker_url)
        if connection_ok is False:
            response = input("\nConnection test failed. Continue anyway? (y/N): ")
            if response.lower() != 'y':
                print("Startup cancelled.")
                sys.exit(1)

    # Prepare Flask app arguments
    flask_args = []
    if args.moonraker_url:
        flask_args.extend(['--moonraker-url', args.moonraker_url])
    if args.poll_interval != 15:
        flask_args.extend(['--poll-interval', str(args.poll_interval)])

    # Start the application
    print(f"\nüöÄ Starting Printer Logbook...")
    print("   Access the web interface at: http://localhost:5000")
    print("   Press Ctrl+C to stop the application")
    print("-" * 40)

    try:
        if args.debug:
            os.environ['FLASK_DEBUG'] = '1'

        subprocess.run([sys.executable, 'app.py'] + flask_args)
    except KeyboardInterrupt:
        print("\n\nüëã Printer Logbook stopped. Goodbye!")
    except FileNotFoundError:
        print("‚ùå app.py not found. Make sure you're in the correct directory.")
        sys.exit(1)

if __name__ == '__main__':
    main()
